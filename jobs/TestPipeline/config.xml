<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.31">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.4.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.4.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63">
    <script>pipeline {
    agent any
    
     stages {
        stage(&apos;SCM&apos;) {
            steps {
                git url: &apos;https://github.com/blitznihar/simple-java-maven-app.git&apos;
            }
        }
        stage(&apos;SonarQube analysis&apos;) {
            steps {
                withSonarQubeEnv(&apos;SonarqubeServer&apos;) {
                    // Optionally use a Maven environment you&apos;ve configured already
                    sh &apos;mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar&apos;
                }
            }
        }
        stage(&apos;Build&apos;) {
            steps {
                sh &apos;mvn -B -DskipTests clean package&apos;
            }
        }
        stage(&apos;Test&apos;) {
            steps {
                sh &apos;mvn test&apos;
            }
            post {
                always {
                    junit &apos;target/surefire-reports/*.xml&apos;
                }
            }
        }
        stage (&apos;Distribute binaries&apos;) { 
             steps {
                script {
                    def SERVER_ID = &apos;ArtifactoryServer&apos; 
                    def server = Artifactory.server SERVER_ID
                    def uploadSpec = 
                    &quot;&quot;&quot;
                    {
                    &quot;files&quot;: [
                        {
                            &quot;pattern&quot;: &quot;/target/(*).jar&quot;,
                            &quot;target&quot;: &quot;libs-snapshots-local/com/mycompany/app/{1}/&quot;
                        },
                        {
                            &quot;pattern&quot;: &quot;/target/(*).war&quot;,
                            &quot;target&quot;: &quot;libs-snapshots-local/com/mycompany/app/{1}/&quot;
                        }
                    ]
                    }
                    &quot;&quot;&quot;
                    def buildInfo = Artifactory.newBuildInfo() 
                    buildInfo.env.capture = true 
                    buildInfo=server.upload(uploadSpec) 
                    server.publishBuildInfo(buildInfo) 
                }

             }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>